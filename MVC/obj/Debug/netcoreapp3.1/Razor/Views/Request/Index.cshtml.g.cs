#pragma checksum "C:\Users\LENOVO\source\repos\MCC_Compensation\MVC\Views\Request\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "858605e1f28864e33a942f2b0d2a6fe03b4cf7f7"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Request_Index), @"mvc.1.0.view", @"/Views/Request/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ce34fa54d10da807c2e28437f889d26e36c9304c", @"/Views/Request/Index.cshtml")]
    public class Views_Request_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\LENOVO\source\repos\MCC_Compensation\MVC\Views\Request\Index.cshtml"
   Layout = "_Layout";
    ViewBag.Title = "Compensation Request";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<div class=""container"">
    <h2 class=""page-header"">
        Compensation Request
    </h2>
    <div>
        <table id=""table_id"" class=""table table-sm table-striped table-bordered m-2"">
            <thead>
                <tr>
                    <th>No.</th>
                    <th>Request ID</th>
                    <th>Applicants Name</th>
                    <th>Join Date</th>
                    <th>Manager</th>
                    <th>Submission</th>
                    <th>Event Date</th>
                    <th>Request Date</th>
                    <th>Details</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
            <tfoot>
                <tr>
                    <th>No.</th>
                    <th>Request ID</th>
                    <th>Applicants Name</th>
                    <th>Join Date</th>
                    <th>Manager</th>
                    <th>Submission</th>
                    <th>Event Date</th>
           ");
            WriteLiteral(@"         <th>Request Date</th>
                    <th>Details</th>
                </tr>
            </tfoot>
        </table>
    </div>
</div>

<div class=""modal fade"" role=""dialog"" id=""modal"">
    <div class=""modal-dialog"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h4 class=""modal-title"">Employee</h4>
                <button type=""button"" class=""close"" data-dismiss=""modal"" aria-label=""Close""><span aria-hidden=""true"" onclick=""Readonly()"">&times;</span></button>
            </div>
            <div class=""modal-body"">
                <form id=""form"" name=""form"">
                    <div class=""form-row"">
                        <div class=""col-6"">
                            <input type=""hidden"" class=""form-control"" name=""RequestID"" id=""RequestID"" />
                            <div class=""form-group"">
                                <label for=""employeeName"" class=""col-form-label"">Applicant's Name</label>
                               ");
            WriteLiteral(@" <input type=""text"" class=""form-control"" name=""EmployeeName"" id=""EmployeeName"" />
                            </div>
                            <div class=""form-group"">
                                <label for=""joinDate"" class=""col-form-label"">Join Date</label>
                                <input type=""date"" class=""form-control"" name=""JoinDate"" id=""JoinDate"">
                            </div>
                            <div class=""form-group"">
                                <label for=""manager"" class=""col-form-label"">Manager</label>
                                <input type=""text"" class=""form-control"" name=""Manager"" id=""Manager"">
                            </div>
                        </div>
                        <div class=""col-6"">
                            <div class=""form-group"">
                                <label for=""compensationName"" class=""col-form-label"">Compensation Name</label>
                                <input type=""text"" class=""form-control"" name=""Compensat");
            WriteLiteral(@"ionName"" id=""CompensastionName"">
                            </div>
                            <div class=""form-group"">
                                <label for=""eventDate"" class=""col-form-label"">Event Date</label>
                                <input type=""date"" class=""form-control"" name=""EventDate"" id=""EventDate"">
                            </div>
                            <div class=""form-group"">
                                <label for=""RequestDate"" class=""col-form-label"">Request Date</label>
                                <input type=""date"" class=""form-control"" name=""RequestDate"" id=""RequestDate"">
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class=""modal-footer"">
                <button class=""btn"" data-dismiss=""modal"" aria-hidden=""true"" onclick=""Readonly()"">Close</button>
                <button class=""btn btn-primary"" type=""submit"" form=""form"" id=""Submit"">Submit</button");
            WriteLiteral(">\r\n            </div>\r\n        </div><!-- /.modal-content -->\r\n    </div><!-- /.modal-dialog -->\r\n</div><!-- /.modal -->\r\n\r\n");
            DefineSection("scripts", async() => {
                WriteLiteral(@"
    <script>
        var isUpdate = 0;
        $(document).ready(function () {
            debugger;
            table = $('#table_id').DataTable({
                dom: ""<'row'<'col-sm-5'l><'col-sm-4 text-center'B><'col-sm-3'f>>"" +
                    ""<'row'<'col-sm-12'tr>>"" +
                    ""<'row'<'col-sm-6'i><'col-sm-6'p>>"",
                buttons: [
                    {
                        extend: 'csv',
                        exportOptions: {
                            columns: [0, 2]
                        }
                    },
                    {
                        extend: 'excel',
                        exportOptions: {
                            columns: [0, 2]
                        }
                    },
                    {
                        extend: 'pdf',
                        exportOptions: {
                            columns: [0, 2]
                        }
                    }
                ],
                ""responsiv");
                WriteLiteral(@"e"": true,
                ""filter"": true,
                ""orderMulti"": false,
                ""ajax"": {
                    ""url"": ""Get"",
                    ""type"": ""Get"",
                    ""dataSrc"": ""result""
                },
                ""columnDefs"": [
                    {
                        ""targets"": [1],
                        ""visible"": false,
                    },
                    {
                        ""targets"": [0, 8],
                        ""orderable"": false,
                    },
                    {
                        ""targets"": [0, 1, 3, 5, 6, 7, 8],
                        ""className"": ""text-center"",
                    }
                ],
                ""columns"": [
                    {
                        ""data"": null,
                        ""name"": ""no"",
                        ""autowidth"": true,
                        ""render"": function (data, type, row, meta) {
                            return meta.row + meta.settings.");
                WriteLiteral(@"_iDisplayStart + 1;
                        }
                    },
                    { ""data"": 'requestID' },
                    { ""data"": 'employee.employeeName' },
                    {
                        ""data"": 'employee.joinDate',
                        ""render"": function (data, type, row) {
                            return moment(data).format('DD/MM/YYYY');
                        }
                    },
                    { ""data"": 'employee.manager.employeeName' },
                    { ""data"": 'compensation.compensationName' },
                    {
                        ""data"": 'eventDate',
                        ""render"": function (data, type, row) {
                            return moment(data).format('DD/MM/YYYY');
                        }
                    },
                    {
                        ""data"": 'requestDate',
                        ""render"": function (data, type, row) {
                            return moment(data).format('DD/MM/Y");
                WriteLiteral(@"YYY');
                        }
                    },
                    {
                        ""data"": 'requestID',
                        ""render"": function (data, type, row, meta) {
                            return '<a class=""btn btn-outline-info"" data-toggle=""tooltip"" data-placement=""top"" title=""Detail Document""  onclick=""GetDocument(\'' + row['requestID'] + '\')""><i class=""fas fa-file""></i> Document</a> ' +
                                '<a class=""btn btn-outline-success"" data-toggle=""tooltip"" data-placement=""top"" title=""Approval Status""  onclick=""GetStatus(\'' + row['requestID'] + '\')""><i class=""fas fa-history""></i> Status</a> '
                        }
                    }
                ]
            });
        });

        function GetDocument(requestID) {
            $.ajax({
                url: ""GetById"",
                type: ""GET"",
                data: { 'key': id },
                success: function (result) {
                    $('#modal').modal('show');
");
                WriteLiteral(@"                    var data = result[""result""];
                    console.log(data)
                    $('#RequesetID').val(data.requestID);
                    $('#EmployeeName').val(data.employee.employeeName);
                    $('#JoinDate').val(moment(data.joinDate).format('YYYY-MM-DD'));
                    $('#Manager').val(data.manager.employeeName);
                    $('#CompensationName').val(data.compensation.compensationName);
                    $('#EventDate').val(moment(data.eventDate).format('YYYY-MM-DD'));
                    $('#RequestDate').val(moment(data.requestDate).format('YYYY-MM-DD'));
                    isUpdate = 1;
                }
            });
        }

        function GetStatus(requestID) {
            $.ajax({
                url: ""GetById"",
                type: ""GET"",
                data: { 'key': id },
                success: function (result) {
                    $('#modal').modal('show');
                    var data = result[""result""");
                WriteLiteral(@"];
                    console.log(data)
                    $('#RequesetID').val(data.requestID);
                    $('#EmployeeName').val(data.employee.employeeName);
                    $('#JoinDate').val(moment(data.joinDate).format('YYYY-MM-DD'));
                    $('#Manager').val(data.manager.employeeName);
                    $('#CompensationName').val(data.compensation.compensationName);
                    $('#EventDate').val(moment(data.eventDate).format('YYYY-MM-DD'));
                    $('#RequestDate').val(moment(data.requestDate).format('YYYY-MM-DD'));
                    isUpdate = 1;
                }
            });
        }

    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
